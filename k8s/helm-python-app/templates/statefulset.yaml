apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "helm-python-app.fullname" . }}
  labels:
    {{- include "helm-python-app.labels" . | nindent 4 }}
spec:
  podManagementPolicy: Parallel
  serviceName: {{ include "helm-python-app.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm-python-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm-python-app.labels" . | nindent 8 }}
	{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "helm-python-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: get
        image: busybox
        command:
        - wget
        - "-O"
        - "/work-dir/index.html"
        - "https://www.google.com"
        volumeMounts:
        - name: python-data
          mountPath: /work-dir"
      - name: first-write
        image: busybox
        command:
        - sh
        - "-c"
        - "echo 'first write' >> /work-dir/file"
        volumeMounts:
        - name: python-data
          mountPath: "/work-dir"
      - name: second-write
        image: busybox
        command:
        - sh
        - "-c"
        - "echo 'second write' >> /work-dir/file"
        volumeMounts:
        - name: python-data
          mountPath: "/work-dir"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          env:
            - name: HELM_SECRET
              valueFrom:
                secretKeyRef:
                  name: helm-secrets
                  key: password
          # do not use env
          # envFrom:
          #   - configMapRef:
          #       name: env-configmap
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

    {{- if .Values.pvc.create }}
    volumeClaimTemplates:
    - metadata:
        name: {{ .Values.pvc.name }}
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ .Values.pvc.storageClass }}
        resources:
          requests:
            storage: {{ .Values.pvc.size }}
    {{- end }} 